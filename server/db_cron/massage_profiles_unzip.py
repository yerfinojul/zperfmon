#!/usr/bin/python

#
# Copyright 2013 Zynga Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#      distributed under the License is distributed on an "AS IS" BASIS,
#      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
# 
#
# For each bzip file in given directory unbzip-untar into a newly created dir
#

import os
import re
import commands
import sys
import syslog
import traceback
import shutil
from glob import glob
# import json #for now, we'll depend on a pure python impl
#to change chmod
import stat

server_config_file = "/etc/zperfmon/server.cfg"

# holder class for putting in config parameters
class CFG:

    def set_option(self, option, value):
        setattr(self, option, value)

    pass

def debug_print(*args):
    #print(args)
    return

#
# Read the server config file which is php code that creates a map.
#
def get_server_config(config_file):

    config_content = open(config_file).read()

    cfg = CFG()
    for m in re.finditer("^[\t ]*\"([^\"]+)\"\s*=>\s*\"([^\"]+)\"",
                         config_content, re.MULTILINE):
        cfg.set_option(m.group(1), m.group(2))

    return cfg

#
# Find all files in the given directory which look like and uploaded
# tarbzip appended with the IP of the uploading machine
#
# Create a directory with the IP and extract the contents into that directory
#
# upload_path: directory to scan for tbz's
#
# Returns the list of directories such created
#
# dir_list = un_tarbzip("/var/zperfmon/fish/xhprof/712716")
# print dir_list
#

def un_tarbzip(server_cfg):
    tbz_re = "^(H?[0-9]{10,10})\.tar\.bz__([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)$"
    tbz_re = re.compile(tbz_re);
    
    dir_list = []
    #
    # Uploaded tar files, which is to be processed are written in .profiles file
    # It contains a comma separeted names of file as shown below
    # 1318843617.tar.bz__127.0.0.1,1318843618.tar.bz__127.0.0.1,
    # rename the .profiles to a tmp file and then start processing this
    #
    try:
        marker_file =  server_cfg.upload_path + "/.profiles"
        tmp_marker_file = server_cfg.upload_path + "/.profiles.tmp"
        os.rename(marker_file, tmp_marker_file)
        files_to_process = open(tmp_marker_file).read().split(",")
        # print files_to_process
    except:
        syslog.syslog("Either marker file is not there or problem in renaming of marker file") 
        sys.exit(0)

    for file_name in files_to_process:
    
        match = tbz_re.match(file_name)
        if not match:
            continue

        dir_name = match.group(2)
        ip_path = os.path.join(server_cfg.upload_path, dir_name)
        try:
            os.mkdir(ip_path)
        except:
            pass

        # strip all path components
        bad_files = []
        try:
            import tarfile
            from os.path import dirname
            t = tarfile.open(file_name)

            try:
                # List of bad page names if any has sneaked in
                bad_files = [os.path.basename(x) for x in t.getnames() if not x.endswith(".php:xhprof")]
                bad_files = [x for x in bad_files if x.endswith(":xhprof")]
            except: pass
                
            dirs = map(lambda a: dirname(a), filter(lambda x: x.find(':xhprof') != -1 , t.getnames()))
            upload_path = set(dirs).pop()
            n_components = len(upload_path.split(os.sep))
        except:
            n_components = len(server_cfg.client_upload_path.split(os.sep))

        cmd = "tar --strip-components %d -xjf %s -C %s" % (n_components, file_name, dir_name)
        result = commands.getstatusoutput(cmd)

        # Skip failures, they are not critical
        if result[0]:
            debug_print("Failed:", cmd)
            debug_print("Error:", result[1])
            continue

        # Remove profiles generated by bad script names
        for fname in bad_files:
            try: os.unlink(os.path.join(ip_path, fname))
            except: pass
            
        dir_list.append(dir_name)

    # delete the tmp maker file and create one marker file if it doesn't exist.
    os.unlink(tmp_marker_file)
    if not os.path.isfile(marker_file):
         try:
            open(marker_file,"w").close()
            os.chmod(marker_file, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
         except:
            syslog.syslog("cann't create marker file")
    # return uniq ip list (duplicate ips may be there due to twice upload in one slot)
    return list(set(dir_list))

def main(server_cfg):
    try:
        game_name = sys.argv[1]
        upload_path = sys.argv[2]
        run_id = sys.argv[3]
    except:
        print "usage: %s <game name> <dir with uploaded tbz's> <timestamp>" % (
            sys.argv[0])
        raise "cmd line parameters not specified"

    server_cfg.set_option("upload_path", upload_path)
    server_cfg.set_option("run_id", run_id)
    server_cfg.set_option("game_name", game_name)

    os.chdir(upload_path)

    # List of all client machines that uploaded data
    client_ips = un_tarbzip(server_cfg)
    # print client_ips

    return (0, client_ips)

def usage():
    print "Usage: %s <game name> <path clients upload tbzs to> <timestamp>" % (sys.argv[0])
    return


if __name__ == "__main__":
    status = 37
    try:
        server_cfg = get_server_config(server_config_file)
        (status, client_ips) = main(server_cfg)
    except:
        info = sys.exc_info()
        syslog.syslog(str(info[0]))
        syslog.syslog(traceback.format_exc())
        status = 38

    if not status:
        print ",".join(client_ips) # This ip list will be used while processing at 5 min interval
    sys.exit(status)

